#!/usr/bin/env bash

# Onex :     Program to install hacking tools
# Version:   0.2
# License:   MIT

__version__="0.2.1"

# check if onex is with bash or zsh
shell=$(ps -p $$ | awk '$1 != "PID" {print $(NF)}')
if [ $shell != "bash" ] && [ $shell != "zsh" ]; then
  echo "Sorry, onex doesn't support '$shell'"
  echo "Run onex with 'bash'"; echo "Type: bash $0"
  exit 1
fi

# Colors
nc="\033[0m"
red="\033[0;31m"
green="\033[0;32m"
yellow="\033[0;33m"
blue="\033[0;34m"
purple="\033[0;35m"
cyan="\033[0;36m"

logo="${yellow}
  ___  _ __   ___${red} __  __
${yellow} / _ \\| '_ \\ / _ ${red} \\ \\/ /
${yellow}| (_) | | | |  __/${red} >  < 
${yellow} \___/|_| |_|\\___${red} /_/\_\\
"
prompt="${nc}[${blue}onex${nc}@${blue}space${nc}]$"

onex_link="https://github.com/1RaY-1/onex.git"

# Where to download tools (onex is included)
download_dir="${HOME}/Downloads/"
if [ ! -d $download_dir ]; then mkdir -p $download_dir
fi

# checking for system bin dir
if [ -d /data/data/com.termux/files/usr/bin ]; then
  bin="/data/data/com.termux/files/usr/bin"
elif [ -d /usr/local/bin ]; then
  bin="/usr/local/bin"
elif [ -d /bin ]; then
  bin="/bin"
elif [ -d /sbin ]; then
  bin="/sbin"
fi

# checking for configuration dir
if [ -d /data/data/com.termux/files/usr/etc ]; then
  conf_dir="/data/data/com.termux/files/usr/etc"
elif [ -d /etc ]; then
  conf_dir="/etc"
fi

# configuration files
if [ -d data/ ]; then
  if [ -e data/tools.dat ]; then
    tools_data="data/tools.dat"
  else echo -e "${red}Missing needed file: ${nc}data/tools.dat";exit 1
  fi
  if [ -e data/category.dat ]; then
    category_data="data/category.dat"
  else echo -e "${red}Missing needed file: ${nc}data/category.dat";exit 1
  fi
else
  if [ -e $conf_dir/onex/data/tools.dat ]; then
    tools_data="$conf_dir/onex/data/tools.dat"
  else echo -e "${red}Missing needed file: ${nc}$conf_dir/onex/data/tools.dat";exit 1
  fi
  if [ -e $conf_dir/onex/data/category.dat ]; then
    category_data="$conf_dir/onex/data/category.dat"
  else echo -e "${red}Missing needed file: ${nc}$conf_dir/onex/data/category.dat";exit 1
  fi
fi

# checking for system root access
if [ `command -v sudo` ]; then
  sudo="sudo"
else
  sudo=""
fi

# checking for system package manager
install="install"
if [ -e /data/data/com.termux/files/usr/bin/pkg ]; then
  pac="pkg"
elif [ `command -v apt` ]; then
  pac="apt"
elif [ `command -v apt-get` ]; then
  pac="apt-get"
elif [ `command -v apk` ]; then
  pac="apk"
elif [ `command -v dnf` ]; then
  pac="dnf"
elif [ `command -v yum` ]; then
  pac="yum"
elif [ `command -v pacman` ]; then
  pac="pacman"
  install="-S"
elif [ `command -v brew` ]; then
  pac="brew"
  sudo=""
fi

# install a package by typing less code
install_pkg () {
  echo "y" | $sudo $pac $install $1
}

# If CTRL + C is detected
trap exit_onex INT 
exit_onex () {
  clear
  echo -e "$logo"
  echo -e "${nc}Thanks for using ${green}Onex${nc}"
  exit
}

# check if missing dependencies
for each_pac in "curl" "wget" "git"; do
  if [ ! `command -v $each_pac` ]; then
    install_pkg $each_pac
#   Instead of typing:
#    echo "y" | $sudo $pac $install $each_pac
  fi
done

# install tools
install() {
  # get tool alias name
  tool_name=`grep '.' $tools_data | sort -f | sed -n "$1p" | cut -d"|" -f1`
  # get tool package manager
  tool_installer=`grep '.' $tools_data | sort -f | sed -n "$1p" | cut -d"|" -f5`
  # tool dependency (requirements)
  tool_dependency=`grep '.' $tools_data | sort -f | sed -n "$1p" | cut -d"|" -f6 | tr ' ' ','`
  # tool url
  tool_url=`grep '.' $tools_data | sort -f | sed -n "$1p" | cut -d"|" -f4`
  # package name or tool name
  tool_pac=`grep '.' $tools_data | sort -f | sed -n "$1p" | cut -d"|" -f2`

  # check tool name is null or not
  if [ "$tool_name" ]; then
    case $tool_installer in

    # for default package
    package_manager)
      # check tool is already installed or not
      if [ ! `command -v $tool_pac` ]; then
        #check user is online or not
        wget -q --spider http://google.com
        if [ $? -eq 0  ]; then
          echo -e "${green}Installing ...${nc}"
          sleep 1
          # install tool dependency
          if [ $tool_dependency != "null" ]; then
            for dep_name in `echo -e $tool_dependency | tr ',' ' '`; do
              # installing dependency
              if [ ! `command -v $dep_name` ]; then
                install_pkg $dep_name
              fi
            done
          fi
          # installing tools
          if [ $tool_pac != "" -a $tool_pac != "null" ]; then
            install_pkg $tool_pac
          fi
        else
          echo -e "${red}Sorry you are offline !!${nc}"
        fi
        # check tool is installed or not
        if [ ! `command -v $tool_pac` ]; then
          echo -e "${red}Sorry ${nc}: '$tool_name' ${red} is not installed !!${nc}"
        else
          echo -e "${nc}'$tool_name' ${nc}: ${green} is installed successfully !!${nc}"
        fi
      else
        echo -e "${red}Sorry ${nc}: '$tool_name' ${green} is already installed !!${nc}"
      fi
    ;;
    # for github tools
    git)
      # check tool is already installed or not
      if [ ! -e $download_dir/$tool_pac ]; then
        #check user is online or not
        wget -q --spider http://google.com
        if [ $? -eq 0 ]; then
          echo -e "${green}Installing ...${nc}"
          sleep 1
          # install tool dependency
          if [ $tool_dependency != "null" ]; then
            for dep_name in `echo -e $tool_dependency | tr ',' ' '`; do
              # installing dependency
              if [ ! `command -v $dep_name` ]; then
                install_pkg $dep_name
              fi
            done
          fi
          # installing tools
          if [ $tool_url != "" -a $tool_url != "null" ]; then
            git clone $tool_url $download_dir/$tool_name
          fi
        else
          echo -e "${red}Sorry you are offline !!${nc}"
        fi
        # check tool is installed or not
        if [ ! -e $download_dir/$tool_pac ]; then
          echo -e "${red}Sorry ${nc}: '$tool_name' ${red} is not installed !!${nc}"
        else
          echo -e "${purple}'$tool_name' ${green} is installed successfully !!${nc}"
        fi
      else
        echo -e "${red}Sorry ${nc}: '$tool_name' ${green} is already installed !!${nc}"
      fi
    ;;
    # for curl tools
    curl)
      # check tool is already installed or not
      if [ ! -e $download_dir/$tool_pac ]; then
        #check user is online or not
        wget -q --spider http://google.com
        if [ $? -eq 0 ]; then
          echo -e "${green}Installing ...${nc}"
          sleep 1
          # install tool dependency
          if [ $tool_dependency != "null" ]; then
            for dep_name in `echo -e $tool_dependency | tr ',' ' '`; do
              # installing dependency
              if [ ! `command -v $dep_name` ]; then
                install_pkg $dep_name
              fi
            done
          fi
          # installing tools
          if [ $tool_url != "" -a $tool_url != "null" ]; then
            curl -o $download_dir/$tool_pac $tool_url
          fi
        else
          echo -e "${red}Sorry you are offline !!${nc}"
        fi
        # check tool is installed or not
        if [ ! -e $download_dir/$tool_pac ]; then
          echo -e "${red}Sorry ${nc}: '$tool_name' ${red} is not installed !!${nc}"
        else
          echo -e "${nc}'$tool_name' ${nc}: ${green} is installed successfully !!${nc}"
        fi
      else
        echo -e "${red}Sorry ${nc}: '$tool_name' ${green} is already installed !!${nc}"
      fi
    ;;
    esac
  fi
  # wait for user any input
  echo -e -n "$prompt "
  read tmp_inp
}

# install category tools
install_category_tool() {
  # get tool alias name
  tool_name=`grep '.' $tools_data | sort -f | sed -n "/$1/p" | sed -n "$2 p" | cut -d"|" -f1`
  # get tools package manager
  tool_installer=`grep '.' $tools_data | sort -f | sed -n "/$1/p" | sed -n "$2 p" | cut -d"|" -f5`
  # tool dependency (requirements)
  tool_dependency=`grep '.' $tools_data | sort -f | sed -n "/$1/p" | sed -n "$2 p" | cut -d"|" -f6 | tr ' ' ','`
  # tool url
  tool_url=`grep '.' $tools_data | sort -f | sed -n "/$1/p" | sed -n "$2 p" | cut -d"|" -f4`
  # package name or tool name
  tool_pac=`grep '.' $tools_data | sort -f | sed -n "/$1/p" | sed -n "$2 p" | cut -d"|" -f2`
  
  # check tool name is null or not
  if [ "$tool_name" ]; then

    case $tool_installer in

    # for default package
    package_manager)
      # check tool is already installed or not
      if [ ! `command -v $tool_pac` ]; then
        #check user is online or not
        wget -q --spider http://google.com
        if [ $? -eq 0  ]; then
          echo -e "${green}Installing ...${nc}"
          sleep 1
          # install tool dependency
          if [ $tool_dependency != "null" ]; then
            for dep_name in `echo -e $tool_dependency | tr ',' ' '`; do
              # installing dependency
              if [ ! `command -v $dep_name` ]; then
                install_pkg $dep_name
              fi
            done
          fi
          # installing tools
          if [ $tool_pac != "" -a $tool_pac != "null" ]; then
            install_pkg $tool_pac
          fi
        else
          echo -e "${red}Sorry you are offline !!${nc}"
        fi
        # check tool is installed or not
        if [ ! `command -v $tool_pac` ]; then
          echo -e "${red}Sorry ${nc}: '$tool_name' ${red} is not installed !!${nc}"
        else
          echo -e "${nc}'$tool_name' ${nc}: ${green} is installed successfully !!${nc}"
        fi
      else
        echo -e "${red}Sorry ${nc}: '$tool_name' ${green} is already installed !!${nc}"
      fi
    ;;
    # for github tools
    git)
      # check tool is already installed or not
      if [ ! -e $download_dir/$tool_pac ]; then
        #check user is online or not
        wget -q --spider http://google.com
        if [ $? -eq 0  ]; then
          echo -e "${green}Installing ...${nc}"
          sleep 1
          # install tool dependency
          if [ $tool_dependency != "null" ]; then
            for dep_name in `echo -e $tool_dependency | tr ',' ' '`; do
              # installing dependency
              if [ ! `command -v $dep_name` ]; then
                install_pkg $dep_name
              fi
            done
          fi
          # installing tools
          if [ $tool_url != "" -a $tool_url != "null" ]; then
            git clone $tool_url $download_dir/$tool_pac
          fi
        else
          echo -e "${red}Sorry you are offline !!${nc}"
        fi
        # check tool is installed or not
        if [ ! -e $download_dir/$tool_pac ]; then
          echo -e "${red}Sorry ${nc}: '$tool_name' ${red} is not installed !!${nc}"
        else
          echo -e "${nc}'$tool_name' ${nc}: ${green} is installed successfully !!${nc}"
        fi
      else
        echo -e "${red}Sorry ${nc}: '$tool_name' ${green} is already installed !!${nc}"
      fi
    ;;
    # for curl tools
    curl)
      # check tool is already installed or not
      if [ ! -e $download_dir/$tool_pac ]; then
        #check user is online or not
        wget -q --spider http://google.com
        if [ $? -eq 0  ]; then
          echo -e "${green}Installing ...${nc}"
          sleep 1
          # install tool dependency
          if [ $tool_dependency != "null" ]; then
            for dep_name in `echo -e $tool_dependency | tr ',' ' '`; do
              # installing dependency
              if [ ! `command -v $dep_name` ]; then
                install_pkg $dep_name
              fi
            done
          fi
          # installing tools
          if [ $tool_url != "" -a $tool_url != "null" ]; then
            curl -o $download_dir/$tool_pac $tool_url
          fi
        else
          echo -e "${red}Sorry you are offline !!${nc}"
        fi
        # check tool is installed or not
        if [ ! -e $download_dir/$tool_pac ]; then
          echo -e "${red}Sorry ${nc}: '$tool_name' ${red} is not installed !!${nc}"
        else
          echo -e "${nc}'$tool_name' ${nc}: ${green} is installed successfully !!${nc}"
        fi
      else
        echo -e "${red}Sorry ${nc}: '$tool_name' ${green} is already installed !!${nc}"
      fi
   ;;

    esac
  fi
  # wait for user any input
  echo -e -n "$prompt "
  read tmp_inp
}

# list all tools from data
all_tools() {
  while true; do
    clear
    # get all tools data
    echo -e " ${red} ___
//___// ${yellow}All Tools
"
    tool=`grep "." $tools_data | sort -f | grep -n '.' | sed -n 's/:/|/p' | cut -d"|" -f1,2 | tr '|' ' '`
    echo -e " ${green}$tool${nc}"

    echo -e " ${green} 0 Back"
    echo -e -n "$prompt "
    read cmd
    # count total number of tools
    list=`grep -n "." $tools_data | wc -l`
    # process user input
    case ${cmd} in
      [1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9])
        if [ ${cmd} -le $list ]; then
          # install tools
          install ${cmd}
        else
          echo -e "${red}${cmd}: ${purple}invalid option!!"
          sleep 1
        fi
      ;;
      0|back|Back|"")
        break
      ;;
      *)
        echo -e "${red}${cmd}: ${purple}invalid option!!"
        sleep 1
      ;;
    esac
  done
}

# category function
category() {
  while true; do
    clear
    # get all category data
    echo -e " ${red} ___
//___// ${yellow}Tool Category
"
    for data in `grep "." $category_data | grep -n '.' | sed -n 's/:/|/p' | cut -d"|" -f1,2 | tr ' ' '@'`; do
      # display category alias name from data
      for category in $data; do
        echo -e " ${green} $category" | tr '|' ' ' | tr '@' ' '
      done
    done
    echo -e " ${green} 0 Back"
    echo -e -n "$prompt "
    read cmd
    # count total number of category
    list=`grep -n "." $category_data | wc -l`
    # process user input
    case ${cmd} in
      [1-9]|[1-9][0-9])
        if [ ${cmd} -le $list ]; then
          while [ true ]; do
            clear
            # display all tools of selected category
            category=`grep '.' $category_data | sed -n "${cmd} p" | cut -d"|" -f2`
            category_alias=`grep '.' $category_data | sed -n "${cmd} p" | cut -d"|" -f1`
            # get all tools data and display
            echo -e " ${red} ___
//___// ${yellow}$category_alias
"
            for data in `grep "." $tools_data | sort -f | sed -n "/$category/p" | grep -n '.' | sed -n 's/:/|/p' | cut -d"|" -f1,2 | tr ' ' '@'`; do
              # display tools name from data
              for tool in $data; do
                echo -e " ${green} $tool" | tr '|' ' ' | tr '@' ' '
              done
            done
            echo -e " ${green} 0 Back"
            echo -e -n "$prompt "
            read tmp_cmd
            # count total number of tools in category
            list=`grep -n "." $tools_data | sed -n "/$category/p" | wc -l`
            # process user input
            case $tmp_cmd in
              [1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9])
                if [ $tmp_cmd -le $list ]; then
                  # install tools
                  install_category_tool $category $tmp_cmd
                else
                  echo -e "${red}$tmp_cmd: ${purple}invalid option!!"
                  sleep 1
                fi
              ;;
                0|back|Back)
                break
              ;;
              *)
                echo -e "${red}'$tmp_cmd': ${purple}invalid option!!"
                sleep 1
              ;;
            esac
          done
        else
          echo -e "${red}${cmd}: ${purple}invalid option!!"
          sleep 1
        fi
      ;;
      0|back|Back)
        break
      ;;
      *)
        echo -e "${red}${cmd}: ${purple}invalid option!!"
        sleep 1
      ;;
    esac
  done
}

# update onex function
update() {
  clear
  echo -e "$logo"
  # check user is online or not
  wget -q --spider http://google.com
  if [ $? -eq 0 ]; then
    echo -e "${green}Updating ...${nc}"
    sleep 1

    git clone $onex_link $download_dir/onex
    $sudo chmod +x $download_dir/onex/install
    $sudo bash $download_dir/onex/install

    echo -e "${green} onex updated !!${nc}"
    sleep 1
  else
    echo -e "${red}Sorry ${nc}: you are ${red} offline ${nc}!!"
    sleep 1
  fi
}

# about onex function
about() {
  clear
  echo -e "$logo"
  echo -e " ${yellow}About: ${cyan}Onex installs the most famous pentesting tools.\n${nc}"
  echo -e " ${yellow}GitHub:  ${red}https://github.com/1RaY-1/onex${nc}"
  echo -e " ${yellow}Version: ${red} ${__version__}${nc}"
  echo -e " ${yellow}License: ${red} MIT${nc}"
  echo -e "\n\n ${red}Warning:${nc}"
  echo -e " ${cyan}This Tool is made for educational purpose only!${nc}"
  echo -e " ${cyan}We are not responsible for any misuse caused by this program!\n${nc}"
  echo -e -n "Press ENTER " 
  read tmp
}

# this is the main function
menu() {
  while true; do
    clear
    tools=`grep -n '.' $tools_data | wc -l`
    echo -e "$logo"
    echo -e " ${cyan}[1] ${green} All tools ${nc}(${red}$tools tools${nc})"
    echo -e " ${cyan}[2] ${green} Tools category"
    echo -e " ${cyan}[3] ${green} Update onex"
    echo -e " ${cyan}[4] ${green} About us"
    echo -e " ${cyan}[5] ${green} Exit"
    echo -e -n "$prompt "
    read cmd
    case ${cmd} in
      1)
        all_tools
      ;;
      2)
        category
      ;;
      3)
        update
      ;;
      4)
        about
      ;;
      5|exit|Exit)
        exit_onex
      ;;
      *)
        echo -e "${red}${cmd}: ${purple}invalid option!!${nc}"
        sleep 1
      ;;
    esac
  done
}


# list all tools from data
cli_list_all() {
  # get all tools data
  tool=`grep "." $tools_data | sort -f | grep -n '.' | sed -n 's/:/|/p' | cut -d"|" -f1,2 | tr '|' ' '`
  # display tools name from data
  echo -e " ${green}$tool${nc}"
}

# category function
cli_category() {
  # get all category data
  for data in `grep "." $category_data | grep -n '.' | sed -n 's/:/|/p' | cut -d"|" -f1,2 | tr ' ' '@'`; do
    # display category alias name from data
    for category in $data; do
      echo -e " ${green} $category${nc}" | tr '|' ' ' | tr '@' ' '
    done
  done
}

# update process
update_process() {
  # check file is downloaded or not
  if [ -e $download_dir/onex/onex ]; then
    # removing old one
    if [ -e $bin/onex ]; then
      if [ -d $conf_dir/onex ]; then
        $sudo rm -rf $bin/onex
        $sudo rm -rf $conf_dir/onex
      fi
    fi
  fi

  # updating onex
  if [ -e $download_dir/onex/onex ]; then
    $sudo mv -v $download_dir/onex/onex $bin
    $sudo chmod +x $bin/onex
  fi
  if [ -d $download_dir/onex ]; then
    $sudo mv -v $download_dir/onex $conf_dir
  fi
}

# update onex function
cli_update() {
  # check user is online or not
  wget -q --spider http://google.com
  if [ $? -eq 0 ]; then
    echo -e "${green}Updating ...${nc}"
    sleep 1
    git clone $onex_link $download_dir/onex
    update_process
    echo -e "${nc}'onex' ${green} updated successfully !!${nc}"
  else
    echo -e "${red}Sorry ${nc}: you are ${red} offline ${nc}!!${nc}"
  fi
}

# cli install process
install_process() {
  # get tool alias name
  tool_name=`echo -e $1 | cut -d"|" -f1`
  # get tool package manager
  tool_installer=`echo -e $1 | cut -d"|" -f5`
  # tool dependency (requirements)
  tool_dependency=`echo -e $1 | cut -d"|" -f6 | tr ' ' ','`
  # tool url
  tool_url=`echo -e $1 | cut -d"|" -f4`
  # package name or tool name
  tool_pac=`echo -e $1 | cut -d"|" -f2`

  # check tool name is null or not
  if [ "$tool_name" ]; then

    case $tool_installer in 

    # for default package
    package_manager)
      # check tool is already installed or not
      if [ ! `command -v $tool_pac` ]; then
        # check sudo is null or not
        #check user is online or not
        wget -q --spider http://google.com
        if [ $? -eq 0 ]; then
          echo -e "${green}Installing ...${nc}"
          sleep 1
          # install tool dependency
          if [ $tool_dependency != "null" ]; then
            for dep_name in `echo -e $tool_dependency | tr ',' ' '`; do
              # installing dependency
              if [ ! `command -v $dep_name` ]; then
                install_pkg $dep_name
              fi
            done
          fi
          # installing tools
          if [ $tool_pac != "" -a $tool_pac != "null" ]; then
            install_pkg $tool_pac
          fi
        else
          echo -e "${red}Sorry you are offline !!${nc}"
        fi
        # check tool is installed or not
        if [ ! `command -v $tool_pac` ]; then
          echo -e "${red}Sorry ${nc}: '$tool_name' ${red} is not installed !!${nc}"
        else
          echo -e "${nc}'$tool_name' ${nc}: ${green} is installed successfully !!${nc}"
        fi
      else
        echo -e "${red}Sorry ${nc}: ${nc}'$tool_name' ${green} is already installed !!${nc}"
      fi
    ;;
    # for github tools
    git)
      # check tool is already installed or not
      if [ ! -e $download_dir/$tool_pac ]; then
        #check user is online or not
        wget -q --spider http://google.com
        if [ $? -eq 0 ]; then
          echo -e "${green}Installing ...${nc}"
          sleep 1
          # install tool dependency
          if [ $tool_dependency != "null" ]; then
            for dep_name in `echo -e $tool_dependency | tr ',' ' '`; do
              # installing dependency
              if [ ! `command -v $dep_name` ]; then
                install_pkg $dep_name
              fi
            done
          fi
          # installing tools
          if [ $tool_url != "" -a $tool_url != "null" ]; then
            git clone $tool_url $download_dir/$tool_name
          fi
        else
          echo -e "${red}Sorry you are offline !!${nc}"
        fi
        # check tool is installed or not
        if [ ! -e $download_dir/$tool_pac ]; then
          echo -e "${red}Sorry ${nc}: '$tool_name' ${red} is not installed !!${nc}"
        else
          echo -e "${nc}'$tool_name' ${nc}: ${green} is installed successfully !!${nc}"
        fi
      else
        echo -e "${red}Sorry ${nc}: ${nc}'$tool_name' ${green} is already installed !!${nc}"
      fi
    ;;
    # for curl tools
    curl)
      # check tool is already installed or not
      if [ ! -e $download_dir/$tool_pac ]; then
        # check sudo is null or not
        #check user is online or not
        wget -q --spider http://google.com
        if [ $? -eq 0 ]; then
          echo -e "${green}Installing ...${nc}"
          sleep 1
          # install tool dependency
          if [ $tool_dependency != "null" ]; then
            for dep_name in `echo -e $tool_dependency | tr ',' ' '`; do
              # installing dependency
              if [ ! `command -v $dep_name` ]; then
                install_pkg $dep_name
              fi
            done
          fi
          # installing tools
          if [ $tool_url != "" -a $tool_url != "null" ]; then
            curl -o $download_dir/$tool_pac $tool_url
          fi
        else
          echo -e "${red}Sorry you are offline !!${nc}"
        fi
        # check tool is installed or not
        if [ ! -e $download_dir/$tool_pac ]; then
          echo -e "${red}Sorry ${nc}: '$tool_name' ${red} is not installed !!${nc}"
        else
          echo -e "${nc}'$tool_name' ${nc}: ${green} is installed successfully !!${nc}"
        fi
      else
        echo -e "${red}Sorry ${nc}: ${nc}'$tool_name' ${green} is already installed !!${nc}"
      fi
    ;;

    esac
  fi
}

# check tool is exists or not
cli_install() {
  # get tools data
  for data in `grep -i "^$1" $tools_data`; do
    # display tools name from data
    for tool in $data; do
      # convert to lower case and check tool name
      if [[ `echo -e $tool | cut -d"|" -f1 | tr 'A-Z' 'a-z'` = `echo -e $1 | tr 'A-Z' 'a-z'` ]]; then
        get_tool_data=$tool
      fi
    done
  done
  # check data exists or not
  if [ $get_tool_data ]; then
    install_process $get_tool_data
  else
    echo -e "${red}Sorry ${nc}: '$1' ${red} tool not found !!${nc}"
    similar=`grep -i "^$1" $tools_data | cut -d"|" -f1`
    if [ "$similar" ]; then
      echo -e "${blue}Did you mean${nc}:"
      echo -e -n "${green} "
      grep -i "^$1" $tools_data | cut -d"|" -f1
      echo -e -n "${nc}"
    fi
  fi
}

# search tool
cli_search() {
  # get tools data
  similar=`grep -i "^$1" $tools_data | cut -d"|" -f1`
  if [ "$similar" ]; then
    echo -e -n "${green}"
    grep -i "^$1" $tools_data | cut -d"|" -f1
    echo -e -n "${nc}"
  else
    echo -e "${red}Sorry ${nc}: '$1' ${red} tool not found !!${nc}"
  fi
}

# remove function
cli_remove() {
  # add remove tools functionality for remove tools data now it only uninstall onex.
  # removing onex only
  if [ -e $bin/onex ]; then
    if [ -d $conf_dir/onex ]; then
       $sudo rm -rf $bin/onex
       $sudo rm -rf $conf_dir/onex
    fi
  fi
  # check onex removed or not
  if [ ! -e $bin/onex ]; then
    if [ ! -d $conf_dir/onex ]; then
      echo -e "${nc}'onex' : ${green} uninstalled successfully !!${nc}"
    fi
  fi
}

# Start script
if [ $# -eq 1 ]; then
  case $1 in
    start)
      menu
    ;;
    list|-l)
      cli_list_all
    ;;
    update|-u)
      cli_update
    ;;
    remove|-r)
      cli_remove
    ;;
    help|-h)
      echo -e "${yellow}Onex ${red} v${__version__}"
      echo -e "${nc}Usage ${nc}: ${yellow} onex ${nc}[option]... [toolname]...${nc}"
      echo -e "\n  ${blue}Option  \tDescription${nc}"
      echo  -e "  -----------  \t--------------------"
      echo -e "  help, -h  \tdisplay this help."
      echo -e "  list, -l  \tlist all tools."
      echo -e "  list -a  \tlist all tools."
      echo -e "  -l a  \tlist all tools."
      echo -e "  install, -i  \tinstall any tools."
      echo -e "  search, -s  \tsearch tools."
      echo -e "  update, -u  \tupdate onex."
      echo -e "  start  \tstart onex menu mode."
    ;;
    *)
      echo -e "${red}Sorry ${nc}: '$1' ${red} invalid option!!${nc}"
      echo -e "${blue}type ${nc}:\n  'onex -h' or 'onex help' for help.${nc}"
    ;;
  esac
elif [ $# -eq 2 ]; then
  case $1 in
    list|-l)
      case $2 in
        -a|a)
          cli_list_all
         ;;
        *)
          echo -e "${red}Sorry ${nc}: '$2' ${red} invalid option!!${nc}"
          echo -e "${blue}type ${nc}:\n  'onex -h' or 'onex help' for help.${nc}"
        ;;
      esac
    ;;
    install|-i)
      cli_install $2
    ;;
    search|-s)
      cli_search $2
    ;;
    *)
      echo -e "${red}Sorry ${nc}: '$1' ${red} invalid option!!${nc}"
      echo -e "${blue}type ${nc}:\n  'onex -h' or 'onex help' for help.${nc}"
    ;;
  esac
else

# install multiple tools at once (in cli mode only)
# but it is a little buggy
  if [[ $1 = "install" || $1 = "-i" ]]; then
    args=("$@") 
    ELEMENTS=${#args[@]} 
    for (( i=2;i<=$ELEMENTS;i++)); do 
        cli_install ${args[${i}]} 
    done

 else
    echo -e "${blue}type ${nc}:\n  'onex -h' or 'onex help' for help.${nc}"
  fi
fi
